#!/bin/sh
[ "$DEBUG" ] && set -x
set -e

# ----------------------------------------------------------------------------
# Outputs the operating system from /etc/os-release so we can detect features.
# @echo Nothing
# @output 0
# ----------------------------------------------------------------------------

operating_system() {
  echo "$(sh -c '. /etc/os-release; echo $ID')"
}

# ----------------------------------------------------------------------------
# Cleans up common files we don't want hanging around on the image.
# @echo Nothing
# @return 0
# ----------------------------------------------------------------------------

cleanup() {
  if [ -z "$1" ]
    then base_dir=
    else base_dir=$(
      echo $1 | sed -r 's/\/$//'
    )
  fi

  find "$base_dir/" -type f -iname \*.dpkg-dist -delete
  find "$base_dir/" -type f -iname \*.apk-new   -delete
  find "$base_dir/" -type d -name .gem -print0 | xargs -0 rm -rf
  find "$base_dir/usr/src" ! -path "$base_dir/usr/src" 2> /dev/null \
    -delete || true

  rm -rf "$base_dir/var/cache/apt/"*
  rm -rf "$base_dir/var/cache/apk/"*
  rm -rf "$base_dir/var/lib/apt/lists/"*
  rm -rf "$base_dir/opt/jekyll/lib/ruby/gems/"*/cache/*
  rm -rf        "$base_dir/usr/lib/ruby/gems/"*/cache/*
  rm -rf  "$base_dir/usr/local/lib/ruby/gems/"*/cache/*
  rm -rf             "$base_dir/var/lib/gems/"*/cache/*
  rm -rf "$base_dir/etc/hosts" 2> /dev/null || true
  rm -rf "$base_dir/etc/host"  2> /dev/null || true
  rm -rf "$base_dir/etc/mtab"  2> /dev/null || true

  rm -rf "$base_dir/etc/cron.weekly"
  rm -rf "$base_dir/etc/cron.daily"
  rm -rf "$base_dir/etc/motd.d"
  rm -rf "$base_dir/etc/motd"
  rm -rf "$base_dir/etc/inittab"
  rm -rf "$base_dir/etc/initab"
  rm -rf "$base_dir/etc/fstab"
  rm -rf "$base_dir/etc/crontabs"
  rm -rf "$base_dir/etc/modules"
  rm -rf "$base_dir/etc/modules-load.d"
  rm -rf "$base_dir/etc/sysctl.conf"
  rm -rf "$base_dir/etc/rc.local"
  rm -rf "$base_dir/etc/acpi"
  rm -rf "$base_dir/etc/init"
  rm -rf "$base_dir/etc/rmt"
  rm -rf "$base_dir/etc/rc0.d"
  rm -rf "$base_dir/etc/rc1.d"
  rm -rf "$base_dir/etc/rc2.d"
  rm -rf "$base_dir/etc/rc3.d"
  rm -rf "$base_dir/etc/rc4.d"
  rm -rf "$base_dir/etc/rc5.d"
  rm -rf "$base_dir/etc/rc6.d"
  rm -rf "$base_dir/etc/rcS.d"
  rm -rf "$base_dir/etc/conf.d"
  rm -rf "$base_dir/etc/init.d"
  rm -rf "$base_dir/etc/sysctl.d"
  rm -rf "$base_dir/etc/runlevels"
  rm -rf "$base_dir/etc/modprobe.d"
  rm -rf "$base_dir/etc/logrotate.d"
  rm -rf "$base_dir/etc/network"
  rm -rf "$base_dir/etc/periodic"
  rm -rf "$base_dir/etc/rc.conf"
  rm -rf "$base_dir/etc/local.d"
  rm -rf "$base_dir/etc/service"
  rm -rf "$base_dir/etc/sv"
  rm -rf "$base_dir/media"
  rm -rf "$base_dir/mnt"

  rm -rf "$base_dir/run/network"
  rm -rf "$base_dir/var/spool/cron"
  rm -rf "$base_dir/run/sendsigs.omit.d"
  rm -rf "$base_dir/run/resolvconf"
  rm -rf "$base_dir/run/shm"

  find "$base_dir/tmp" ! -path "$base_dir/tmp" \
    ! -iname bats.\*.src -delete
}

# ----------------------------------------------------------------------------
# Enables the Docker stdout logger that is by default disabled.
# @echo Nothing
# @return 0
# ----------------------------------------------------------------------------

enable_stdout_logger() {
  mkdir -p /etc/stdout.d
  cp -R /usr/local/share/docker/startup2.d/stdout \
    /etc/startup2.d
}

# ----------------------------------------------------------------------------
# Install and remove wget from the system without worrying about it yourself.
# @echo Nothing
# @return 0
# ----------------------------------------------------------------------------

___helpers_install_wget() {
  if [ "$(operating_system)" = "alpine" ]
    then apk --update add wget
    else apt-get install \
      --no-install-recommends -y wget
  fi
}

# ----------------------------------------------------------------------------

___helpers_remove_wget() {
  if [ "$(operating_system)" = "alpine" ]
    then apk del wget
    else apt-get autoremove wget \
      --purge -y
  fi
}

# ----------------------------------------------------------------------------
# Allows you to download with wget using a cookie (useful for Java)
# @echo Nothing
# @return 0
# ----------------------------------------------------------------------------

cookie_dl() {
  ___helpers_install_wget
      wget -nv --header "Cookie: $2" $1
  ___helpers_remove_wget
}

# ----------------------------------------------------------------------------
# Allows you to download with wget in a single shot.
# @echo Nothing
# @return 0
# ----------------------------------------------------------------------------

download() {
  __helpers_install_wget
      wget -nv $1
  __helpers_remove_wget
}

# ----------------------------------------------------------------------------
# Compares a sha256 sum when you send your file and the sum.
# @echo On Bad checksum.
# @return 1 | 0
# ----------------------------------------------------------------------------

test_sha() {
  if ! test "$(sha256sum $1 |cut -d' ' -f1)" = "$2"; then
    >&2 echo "Bad Download!"
    exit 1
  fi
}

# ----------------------------------------------------------------------------
# Creates an chowns a log file on your behalf.
# @echo Nothing
# @return 0
# ----------------------------------------------------------------------------

create_log() {
  dir=$(dirname $2)
  if [ "$dir" != "." ]; then
    mkdir -p /var/log/$dir
    chown $1 /var/log/$dir
  fi

  touch /var/log/$2
  chown $1 /var/log/$2
}

# ----------------------------------------------------------------------------
# Creates a directory with the specific user in one shot.
# @example create_dir owner folder a+rX
# @echo Nothing
# @return 0
# ----------------------------------------------------------------------------

create_dir() {
  mkdir -p $2
  chown $1 $2

  if [ "$3" ]
    then chmod $3 $2
  fi
}

# ----------------------------------------------------------------------------
# Modifies a users GID and UID to your preference and fixes their files.
# @echo Nothing
# @return 0
# ----------------------------------------------------------------------------

reset_users() {
  sed -ri "s!:Linux User,{3}:!:linux-user:!" /etc/passwd

  for u in "$@"; do
    canonical=$(echo $u | awk -F: '{ print $1 }')
      new_uid=$(echo $u | awk -F: '{ print $2 }')

             gid=$(getent group  $canonical | awk -F: '{ print $3 }')
             uid=$(getent passwd $canonical | awk -F: '{ print $3 }')
     current_gid=$(getent passwd $canonical | awk -F: '{ print $4 }')

    sed -ri "s/^$canonical:x:$gid/$canonical:x:$new_uid/"  /etc/group
    sed -ri "s/^$canonical:x:$uid/$canonical:x:$new_uid/" /etc/passwd
    if [ -n "$gid" ] && [ "$gid" = "$current_gid" ]; then
      sed -ri "s/^$canonical:x:$new_uid:$gid/$canonical:x:$new_uid:$new_uid/" \
        /etc/passwd
    fi

    if [ "$gid" = "$current_gid" ] && [ -n "$current_gid" ] && [ -n "$gid" ]; then
      sed -ri "s/^$canonical:x:$new_uid:$current_gid/$canonical:x:$new_uid:$new_uid/" \
        /etc/passwd
    fi

    if [ "$gid" ]; then
      find / -group $gid \
        -not -path '/proc/*' \
        -not -path '/sys/*' \
        -not -path '/cdrom/*' \
        -not -path '/dev/*' \
        -exec chgrp -h $new_uid '{}' \+
    fi

    if [ -n "$uid" ]; then
      find / -user $uid \
        -not -path '/proc/*' \
        -not -path '/sys/*' \
        -not -path '/cdrom/*' \
        -not -path '/dev/*' \
        -exec chown -h $new_uid '{}' \+
    fi
  done
}

# ----------------------------------------------------------------------------
# @alias of `reset_users`
# @echo Nothing
# @return 0
# ----------------------------------------------------------------------------

reset_user() {
  reset_users "$@"
}

# ----------------------------------------------------------------------------
# Gives you the UID of a file so that you can get work done.
# @echo UID (from `stat`)
# @return 0
# ----------------------------------------------------------------------------

get_file_uid() {
  echo $(stat -c '%u' $1)
}

# ----------------------------------------------------------------------------

. /usr/local/share/docker/helpers.d/pkg
. /usr/local/share/docker/helpers.d/apt
. /usr/local/share/docker/helpers.d/apk
. /usr/local/share/docker/helpers.d/ruby
