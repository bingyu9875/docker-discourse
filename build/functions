#!/bin/bash

set -e 

source $BUILD_DIR/env

# system_init
function system_init() {

  for dir in $MKDIRS
  do
    [ ! -d $dir ] && mkdir -p $dir
  done
  
  # set timezone
  RUN echo "Asia/Shanghai" > /etc/timezone;dpkg-reconfigure -f noninteractive tzdata

}

# install_packages
  function install_packages() {
  echo 'APT::Install-Recommends 0;' >> /etc/apt/apt.conf.d/01norecommends && \
  echo 'APT::Install-Suggests 0;' >> /etc/apt/apt.conf.d/01norecommends

  apt-get update && \
  apt-get install -y --no-install-recommends vim.tiny wget sudo net-tools curl \
      ca-certificates unzip runit nodejs advancecomp jpegoptim libjpeg-progs optipng \
      $DEVELOP_PACKAGES $PACKAGES && \
  rm -rf /var/lib/apt/lists/*

  # TODO check when binary packages are ready (not yet)
  curl -sSL -o phantomjs-1.9.8-linux-x86_64.tar.bz2  https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.8-linux-x86_64.tar.bz2 &&\
        tar -xjf phantomjs-1.9.8-linux-x86_64.tar.bz2 &&\
        rm phantomjs-1.9.8-linux-x86_64.tar.bz2 &&\
        cp phantomjs-1.9.8-linux-x86_64/bin/phantomjs /bin/phantomjs &&\
        rm -fr phantomjs-1.9.8-linux-x86_64
}

# install_gosu
function install_gosu() {

  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)" \
  && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc" \
  && export GNUPGHOME="$(mktemp -d)" \
  && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
  && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
  && rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc \
  && chmod +x /usr/local/bin/gosu \
  && gosu nobody true

}

# install_libjemalloc
function install_libjemalloc() {

  mkdir /tmp/jemalloc && cd /tmp/jemalloc &&\
      wget http://www.canonware.com/download/jemalloc/jemalloc-${LIBJEMALLOC_VERSION}.tar.bz2 &&\
      tar -xjf jemalloc-${LIBJEMALLOC_VERSION}.tar.bz2 && cd jemalloc-${LIBJEMALLOC_VERSION} && ./configure && make &&\
      mv lib/libjemalloc.so.1 /usr/lib && cd / && rm -rf /tmp/jemalloc

}

# install_gifsicle
function install_gifsicle() {

  cd /tmp
  curl -O http://www.lcdf.org/gifsicle/gifsicle-${GIFSICLE_VERSION}.tar.gz
  tar zxf gifsicle-${GIFSICLE_VERSION}.tar.gz
  cd gifsicle-${GIFSICLE_VERSION}
  ./configure
  make install
  cd /
  rm -fr /tmp/gifsicle*

}

# install_pngcrush
function install_pngcrush() {

  cd /tmp
  curl -O http://iweb.dl.sourceforge.net/project/pmt/pngcrush/$PNGCRUSH_VERSION/pngcrush-$PNGCRUSH_VERSION.tar.gz
  tar zxf pngcrush-$PNGCRUSH_VERSION.tar.gz
  cd pngcrush-$PNGCRUSH_VERSION
  make && cp -f pngcrush /usr/local/bin
  cd /
  rm -fr /tmp/pngcrush-$PNGCRUSH_VERSION
  rm /tmp/pngcrush-$PNGCRUSH_VERSION.tar.gz

}

# install_pngquant
function install_pngquant() {

  cd /tmp
  wget https://github.com/pornel/pngquant/archive/${PNGQUANT_VERSION}.tar.gz
  tar zxf ${PNGQUANT_VERSION}.tar.gz
  cd pngquant-${PNGQUANT_VERSION}
  ./configure
  make && make install
  cd /
  rm -fr /tmp/pngq*
  rm -fr /tmp/${PNGQUANT_VERSION}*

}

# install_ruby
function install_ruby() {

  add-apt-repository ppa:ubuntu-toolchain-r/test &&\
    apt-get update &&\
    apt-get install -y gcc-4.9 &&\
    (cd /usr/bin && rm gcc && ln -s gcc-4.9 gcc) &&\
    echo 'gem: --no-document' >> /usr/local/etc/gemrc &&\
    mkdir /src && cd /src && git clone https://github.com/sstephenson/ruby-build.git &&\
    cd /src/ruby-build && ./install.sh &&\
    cd / && rm -rf /src/ruby-build && ruby-build 2.0.0-p647 /usr/local &&\
    gem update --system &&\
    gem install bundler &&\
    rm -rf /usr/local/share/ri/2.0.0/system

}


# install_discourse
function install_discourse() {

  groupadd -rg 200 discourse
  useradd  -u  200 -g 200 -rMd /home/discourse discourse

  mkdir /app && chown discourse:discourse /app -R && cd /app

  curl -sLS -o /app/discourse.tar.gz  $DISCOURSE_URL && \
  tar xzf /app/discourse.tar.gz && mv discourse-$DISCOURSE_VERSION discourse && \
  rm -rf /app/discourse.tar.gz

  cd $APP_DIR

  export BUNDLE_ARGS="-j128 --without=development:test --enable-shared" && \
  bundle install


  chown -R discourse:discourse $APP_DIR

  [ ! -d /app/discourse/log ] && gosu discourse mkdir -pv /app/discourse/log

  for f in production.log unicorn.stderr.log unicorn.stdout.log
  do
    [ ! -f /app/discourse/log/$f ] && touch /app/discourse/log/$f
  done

  chown discourse.discourse /app/discourse/log/*

  for c in assets:precompile assets:clean uploads:clean_up avatars:clean; do
    count=0; while [ "$count" -lt 4 ]; do
    set +e
    count=$(echo "$(($count+1))")
    if [ $count -gt 1 ]; then
      printf "\nRetrying\n"
    fi

    gosu discourse rake "$c" && break
    set -e
    sleep 6
  done

  if [ "$count" -gt 3 ]; then
    exit 1
  fi
done

}
